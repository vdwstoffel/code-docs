"use strict";(self.webpackChunkcode_docs=self.webpackChunkcode_docs||[]).push([[5774],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),d=a,h=p["".concat(i,".").concat(d)]||p[d]||m[d]||o;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),a=n(6010);const o={tabItem:"tabItem_Ymn6"};function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,s),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(7462),a=n(7294),o=n(6010),s=n(2466),l=n(6550),i=n(1980),u=n(7392),c=n(12);function p(e){return function(e){return a.Children.map(e,(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:a}}=e;return{value:t,label:n,attributes:r,default:a}}))}function m(e){const{values:t,children:n}=e;return(0,a.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const r=(0,l.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,a.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(r.location.search);t.set(o,e),r.replace({...r.location,search:t.toString()})}),[o,r])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,o=m(e),[s,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:o}))),[i,u]=h({queryString:n,groupId:r}),[p,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[r,o]=(0,c.Nk)(n);return[r,(0,a.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:r}),f=(()=>{const e=i??p;return d({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:s,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,o]),tabValues:o}}var f=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function x(e){let{className:t,block:n,selectedValue:l,selectValue:i,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:p}=(0,s.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),r=u[n].value;r!==l&&(p(t),i(r))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>c.push(e),onKeyDown:d,onClick:m},s,{className:(0,o.Z)("tabs__item",k.tabItem,s?.className,{"tabs__item--active":l===t})}),n??t)})))}function v(e){let{lazy:t,children:n,selectedValue:r}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==r}))))}function b(e){const t=g(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},a.createElement(x,(0,r.Z)({},e,t)),a.createElement(v,(0,r.Z)({},e,t)))}function N(e){const t=(0,f.Z)();return a.createElement(b,(0,r.Z)({key:String(t)},e))}},463:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(4866),s=n(5162);const l={sidebar_label:"React",sidebar_position:3},i="React",u={unversionedId:"javascript/react/react",id:"javascript/react/react",title:"React",description:"Getting Started",source:"@site/docs/javascript/react/react.md",sourceDirName:"javascript/react",slug:"/javascript/react/",permalink:"/javascript/react/",draft:!1,editUrl:"https://github.com/vdwstoffel/code_docs/blob/main/docs/javascript/react/react.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"React",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"More Info",permalink:"/javascript/express/more_info"},next:{title:"Examples",permalink:"/javascript/react/react-examples"}},c={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"Components",id:"components",level:2},{value:"Fragments",id:"fragments",level:2},{value:"Props",id:"props",level:2},{value:"Conditionals",id:"conditionals",level:2},{value:"Loops",id:"loops",level:2},{value:"UseState",id:"usestate",level:2},{value:"UseEffect",id:"useeffect",level:2},{value:"useRef",id:"useref",level:2},{value:"useReducer",id:"usereducer",level:2},{value:"useContext",id:"usecontext",level:2},{value:"Custom Hooks",id:"custom-hooks",level:2},{value:"Router",id:"router",level:2},{value:"Dynamic Router",id:"dynamic-router",level:3},{value:"useNavigate",id:"usenavigate",level:3},{value:"Link",id:"link",level:3},{value:"Navlink",id:"navlink",level:3},{value:"useLoaderData",id:"useloaderdata",level:3},{value:"useLoaderData Dynamic Routing",id:"useloaderdata-dynamic-routing",level:3},{value:"useRouterError",id:"useroutererror",level:3},{value:"useSearchParam",id:"usesearchparam",level:3},{value:"userRouterLoaderData",id:"userrouterloaderdata",level:3},{value:"Router Forms",id:"router-forms",level:3},{value:"Delete Request",id:"delete-request",level:3},{value:"Forms",id:"forms",level:2},{value:"Frontend Form Validation",id:"frontend-form-validation",level:3},{value:"Passing Data to Parent Prop",id:"passing-data-to-parent-prop",level:2},{value:"Portals",id:"portals",level:2},{value:"React Redux",id:"react-redux",level:2},{value:"Scoping CSS",id:"scoping-css",level:2},{value:"Vite: Change Default Port",id:"vite-change-default-port",level:2},{value:"Various",id:"various",level:2},{value:"Timeout on input changes",id:"timeout-on-input-changes",level:3},{value:"Show current link page",id:"show-current-link-page",level:3},{value:"Testing",id:"testing",level:2},{value:"Async Code",id:"async-code",level:3},{value:"Vite",id:"vite",level:3},{value:"Extensions",id:"extensions",level:2}],m={toc:p},d="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"react"},"React"),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"Create React App",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-react-app my-app\ncd my-app\nnpm start\n"))),(0,a.kt)(s.Z,{value:"Vite",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm create vite@latest\ncd my-app\nnpm run dev\n")))),(0,a.kt)("h2",{id:"components"},"Components"),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"Function",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import "./global.css";\n\nexport default function App() {\n  return (\n    <>\n      <h1>Hello World</h1>\n      <p>From React</p>\n    </>\n  );\n}\n'))),(0,a.kt)(s.Z,{value:"Class",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import React from "react";\n\nclass setStateExample extends React.Component {\n  state = {\n    isOn: false,\n  };\n\n  // By using arrow functions is will automatically bind it to this\n  powerSwitch = () => {\n    if (!this.state.isOn) {\n      this.setState({ isOn: true }); // Use setState to change objects\n    } else {\n      this.setState({ isOn: false });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.isOn ? "Power on" : "Power off"}</h1>\n        <button onClick={this.powerSwitch}>Set Power</button>\n      </div>\n    );\n  }\n}\n\nexport default setStateExample;\n')))),(0,a.kt)("h2",{id:"fragments"},"Fragments"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Fragment } from "react";\n\n/*\nInstead of wrapping everything in a div and creating a lot of divs\ninstead wrap your return in a Fragment which just return the props.children.\nThis will avoid creating a lot of divs\n*/\n\nexport default function FragmentExample() {\n  return (\n    <Fragment>\n      <h1>Hello</h1>\n      <h1>World</h1>\n    </Fragment>\n  );\n}\n')),(0,a.kt)("h2",{id:"props"},"Props"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="PropsExample.jsx"',title:'"PropsExample.jsx"'},"export default function PropsExample(props) {\n  const { name, surname } = props;\n  return (\n    <p>\n      Hello {name} {surname}\n    </p>\n  );\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import PropsExample from "./PropsExample";\n\nexport default function App() {\n  return <PropsExample name="Christoff" surname="van der Walt" />;\n}\n')),(0,a.kt)("h2",{id:"conditionals"},"Conditionals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function App() {\n  const day = false;\n  return <h1>{day ? "It is day" : "it is night"}</h1>;\n}\n')),(0,a.kt)("h2",{id:"loops"},"Loops"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'export default function App() {\n  const fruits = ["banana", "ma\xe7a", "laranja"];\n\n  return (\n    <div>\n      <h1>Fruits</h1>\n      {fruits.map((fruit, idx) => (\n        <p key={idx}>{fruit}</p>\n      ))}\n    </div>\n  );\n}\n')),(0,a.kt)("h2",{id:"usestate"},"UseState"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useState")," is a React hook that allows functional components to manage and update state."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"Code",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useState } from "react";\n\nexport default function App() {\n  // destruct array         // Set initial value\n  const [count, setCount] = useState(1);\n\n  function increase() {\n    const newCount = count + 1;\n    setCount(newCount); // Set a new value\n  }\n\n  return (\n    <div className="container">\n      <h1>{count}</h1>\n      <button onClick={increase}>+</button>\n    </div>\n  );\n}\n'))),(0,a.kt)(s.Z,{value:"Live",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function App() {\n  // destruct array         // Set initial value\n  const [count, setCount] = useState(1);\n\n  function increase() {\n    const newCount = count + 1;\n    setCount(newCount); // Set a new value\n  }\n\n  return (\n    <div className="container">\n      <h1>{count}</h1>\n      <button onClick={increase}>+</button>\n    </div>\n  );\n}\n')))),(0,a.kt)("h2",{id:"useeffect"},"UseEffect"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useEffect")," is a React hook that enables functional components to perform side effects, such as data fetching or DOM manipulation, after rendering."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useState, useEffect } from "react";\nimport axios from "axios";\n\nexport default function App() {\n  const [results, setResults] = useState([]);\n\n  useEffect(() => {\n    const getData = async () => {\n      const res = await axios.get("https://swapi.dev/api/films/1/");\n      setResults(res.data);\n    };\n    getData();\n  }, []); // use callback array to run only when given argument changes\n\n  return (\n    <div>\n      <h1>{results.title} </h1>\n    </div>\n  );\n}\n')),(0,a.kt)("h2",{id:"useref"},"useRef"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useRef")," is a React hook used to create a mutable reference that persists across renders and can be used to interact with DOM elements or store values without causing re-renders."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useRef } from "react";\n\n/*\nInstead of giving state to an input give a reference to it\n */\n\nfunction App() {\n  const nameInputRef = useRef();\n\n  const clickerHandler = (e) => {\n    e.preventDefault();\n    console.log(nameInputRef.current.value); // get the value without using state\n    nameInputRef.current.value = ""; // usually you should not change DOM values yourself\n  };\n\n  return (\n    <>\n      <form onSubmit={clickerHandler}>\n        <input type="text" ref={nameInputRef}></input> {/* identify by ref */}\n        <button type="submit">Submit</button>\n      </form>\n    </>\n  );\n}\n\nexport default App;\n')),(0,a.kt)("h2",{id:"usereducer"},"useReducer"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useReducer")," is a React hook that manages complex state logic by dispatching actions to a reducer function, allowing components to update state in a more organized and predictable manner."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { useReducer } from "react";\n\nexport default function App() {\n  // reducer function that will be used for the useReducer hook\n  const reducerFn = (state, action) => {\n    // takes a object as action argument\n    if (action.type === "increase") {\n      return (state += 1); // should return a new state\n    } else {\n      return state + -1;\n    }\n  };\n\n  // const [stateSnapshot, func_to_dispatch_new_action] = useReducer(triggeredFunction, initialState)\n  const [counter, dispatch] = useReducer(reducerFn, 0); // useReducer hook with the reducer function\n\n  const increase = () => {\n    dispatch({ type: "increase" });\n  };\n\n  const decrease = () => {\n    dispatch({ type: "decrease" });\n  };\n\n  return (\n    <>\n      <h1>Counter: {counter}</h1>\n      <button onClick={increase}>Increase</button>\n      <button onClick={decrease}>Decrease</button>\n    </>\n  );\n}\n')),(0,a.kt)("h2",{id:"usecontext"},"useContext"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"useContext")," is a React hook that allows components to access shared data or values from a parent component's context without the need for prop drilling."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/context/auth-context.jsx"',title:'"/context/auth-context.jsx"'},'import { createContext, useState } from "react";\n\nconst AuthContext = createContext({\n  isLoggedIn: false,\n  login: () => {}, // placeholder functions\n  logout: () => {}, // placeholder functions\n});\n\nexport function AuthContextProvider(props) {\n  const [isAuth, setIsAuth] = useState(false);\n\n  const login = () => {\n    setIsAuth(true);\n  };\n\n  const logout = () => {\n    setIsAuth(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isLoggedIn: isAuth, login: login, logout: logout }}>\n      {props.children}\n    </AuthContext.Provider>\n  );\n}\n\n// Export the auth context\nexport default AuthContext;\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { useContext } from "react";\nimport AuthContext from "./context/auth-context";\n\nexport default function App() {\n  const { isLoggedIn, login, logout } = useContext(AuthContext);\n\n  return (\n    <div>\n      <h1>Logged In: {isLoggedIn ? "Yes" : "No"} </h1>\n      <button onClick={login}>Login</button>\n      <button onClick={logout}>Logout</button>\n    </div>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="main.jsx"',title:'"main.jsx"'},'import React from "react";\nimport ReactDOM from "react-dom/client";\nimport App from "./App.jsx";\nimport { AuthContextProvider } from "./context/auth-context.jsx";\n\nReactDOM.createRoot(document.getElementById("root")).render(\n  <React.StrictMode>\n    {/* Wrap app in the context provider */}\n    <AuthContextProvider>\n      <App />\n    </AuthContextProvider>\n  </React.StrictMode>\n);\n')),(0,a.kt)("h2",{id:"custom-hooks"},"Custom Hooks"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/hooks/useToggler.jsx"',title:'"/hooks/useToggler.jsx"'},'import { useState } from "react";\n\n/* By convention prefix class with use */\nexport default function useToggler(value = false) {\n  const [isOn, setIsOn] = useState(value); // set initial values with useState\n\n  const toggle = () => {\n    setIsOn(!isOn);\n  }; // set the value is the opposite of what it is\n\n  return [isOn, toggle]; // return the value and the toggle function\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import useToggler from "./hooks/useToggler";\n\nexport default function App() {\n  const [btnOne, setBtnOne] = useToggler(false); // value , toggle function\n  const [btnTwo, setBtnTwo] = useToggler(false); // value , toggle function\n\n  return (\n    <div>\n      <h onClick={setBtnOne}>Button 1 is {btnOne ? "On" : "Off"}</h>\n      <br />\n      <h onClick={setBtnTwo}>Button 2 is {btnTwo ? "On" : "Off"}</h>\n    </div>\n  );\n}\n')),(0,a.kt)("h2",{id:"router"},"Router"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i react-router-dom\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="MainNavigation.jsx"',title:'"MainNavigation.jsx"'},'import { Link } from "react-router-dom";\n\nexport default function MainNavigation() {\n  return (\n    <header>\n      <p>\n        <Link to="/">Home </Link>\n      </p>\n      {/* Not home component just a link*/}\n      <p>\n        <Link to="Products">Products</Link>\n      </p>\n    </header>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="RootLayout.jsx"',title:'"RootLayout.jsx"'},'import { Outlet } from "react-router-dom";\nimport MainNavigation from "./MainNavigation";\n\nexport default function RootLayout() {\n  return (\n    <>\n      <MainNavigation /> {/* Add a navigation header */}\n      <Outlet /> {/* Display all child pages */}\n    </>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import "./global.css";\n\nimport { createBrowserRouter, RouterProvider } from "react-router-dom"; // npm i react-router-dom\n\nimport RootLayout from "./RootLayout";\nimport Home from "./Home";\nimport Products from "./Products";\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    element: <RootLayout />, // Wrap the root layout and add other pages as children\n    // errorElement: <ErrorPage />, // if page does not exists show a define error page\n    children: [\n      { index: true, element: <Home /> },\n      { path: "/products", element: <Products /> },\n    ],\n  },\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Home.jsx"',title:'"Home.jsx"'},"export default function Home() {\n  return <h1>Welcome Home</h1>;\n}\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Products.jsx"',title:'"Products.jsx"'},"export default function Products() {\n  return <h1>This is the Products page</h1>;\n}\n")),(0,a.kt)("h3",{id:"dynamic-router"},"Dynamic Router"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom"; // npm i react-router-dom\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    element: <RootLayout />, // Wrap the root layout and add other pages as children\n    children: [\n      { path: "/products", element: <Products /> },\n      { path: "products/:id", element: <ProductItems /> }, // dynamic routing\n    ],\n  },\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="ProductItems.jsx"',title:'"ProductItems.jsx"'},'import { useParams } from "react-router-dom";\n\nexport default function ProductItems() {\n  const params = useParams();\n\n  return (\n    <>\n      <h1>Product: {params.id}</h1>\n      {/* params.id must match the dynamic route */}\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"usenavigate"},"useNavigate"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Home.jsx"',title:'"Home.jsx"'},'import { useNavigate } from "react-router-dom";\n\nexport default function Home() {\n  const navigate = useNavigate();\n\n  const clickHandler = () => {\n    navigate("/products"); // programmatically go to another page\n  };\n\n  return (\n    <div>\n      <h1>Welcome Home</h1>\n      <button onClick={clickHandler}>Go To Products</button>\n    </div>\n  );\n}\n')),(0,a.kt)("h3",{id:"link"},"Link"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Link } from "react-router-dom";\n\nexport default function Page() {\n  return <Link to="/toPage">To Page</Link>;\n}\n')),(0,a.kt)("h3",{id:"navlink"},"Navlink"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { NavLink } from "react-router-dom";\n\nexport default function App() {\n  return <Navlink to="/">Home</Navlink>;\n}\n')),(0,a.kt)("h3",{id:"useloaderdata"},"useLoaderData"),(0,a.kt)("p",null,"Load the data before the page loads and pass the data to the page"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom";\n\nimport Content, { loader as eventLoader } from "./Content"; // import the loader function\n\nconst router = createBrowserRouter([\n  { path: "/", element: <Content />, loader: eventLoader }, // call the loader function before the page loads\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Content.jsx"',title:'"Content.jsx"'},'import { useLoaderData } from "react-router-dom";\n\nexport default function Content() {\n  const data = useLoaderData(); // Gain access to the data from the api call\n\n  return <h1>{data.name}</h1>;\n}\n\n/*\n * Loader function, declare as a export function with the component it will use\n * and export it to the routes\n */\nexport async function loader() {\n  const response = await fetch("https://swapi.dev/api/people/1/");\n  return await response;\n}\n')),(0,a.kt)("h3",{id:"useloaderdata-dynamic-routing"},"useLoaderData Dynamic Routing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Content.jsx"',title:'"Content.jsx"'},'import { useLoaderData } from "react-router-dom";\n\nexport default function Content() {\n  const data = useLoaderData(); // Gain access to the data from the api call\n\n  return <h1>{data.name}</h1>;\n}\n\n/*\n * Loader function, declare as a export function with the component it will use\n * and export it to the routes\n */\nexport async function loader({ request, params }) {\n  const num = params.number; // should match the dynamic param from the path ex.  path: "/:number"\n  const response = await fetch(`https://swapi.dev/api/people/${num}/`);\n  return await response;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import "./global.css";\n\nimport { createBrowserRouter, RouterProvider } from "react-router-dom";\n\nimport Content, { loader as eventLoader } from "./Content"; // import the loader function\n\nconst router = createBrowserRouter([\n  { path: "/:number", element: <Content />, loader: eventLoader }, // call the loader function before the page loads\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("h3",{id:"useroutererror"},"useRouterError"),(0,a.kt)("p",null,"Create a custom error component and send error to it. Whenever an error occurs react will find the closest errorElement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom";\n\nimport Content, { loader as eventLoader } from "./Content"; // import the loader function\nimport Error from "./Error";\n\nconst router = createBrowserRouter([\n  {\n    path: "/content",\n    element: <Content />,\n    loader: eventLoader,\n    errorElement: <Error />,\n  }, //add default error handler\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Content.jsx"',title:'"Content.jsx"'},'import { useLoaderData, json } from "react-router-dom";\n\nexport default function Content() {\n  const data = useLoaderData(); // Gain access to the data from the api call\n\n  return <h1>{data.name}</h1>;\n}\n\n/*\n * Loader function, declare as a export function with the component it will use\n * and export it to the routes\n */\nexport async function loader() {\n  const response = await fetch("https://swapi.dev/api/wrong_peope/1/"); // notice wrong api url\n  if (!response.ok) {\n    throw json({ message: "Could not fetch data" }, { status: 400 }); // creates a response object\n  } // will direct to the error page\n  return await response;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Error.jsx"',title:'"Error.jsx"'},'import { useRouteError } from "react-router-dom";\n\nexport default function Error() {\n  const error = useRouteError(); // gain access to thew error object\n\n  return (\n    <>\n      <h1>{error.status}</h1>\n      <h2>{error.data.message}</h2>\n    </>\n  );\n}\n')),(0,a.kt)("h3",{id:"usesearchparam"},"useSearchParam"),(0,a.kt)("p",null,"The useSearchParams hook is used in React Router to access and manage the query parameters of the current URL, allowing components to read and update the search parameters in the browser's address bar."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom";\n\nimport Content from "./Content";\n\nconst router = createBrowserRouter([{ path: "/content", element: <Content /> }]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Content.jsx"',title:'"Content.jsx"'},'import { useSearchParams } from "react-router-dom";\n\nexport default function Products() {\n  // get everything in the params ex localhost/products?bread\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  return (\n    <div>\n      <h1>{searchParams}</h1>\n    </div>\n  );\n}\n')),(0,a.kt)("h3",{id:"userrouterloaderdata"},"userRouterLoaderData"),(0,a.kt)("p",null,"This hook makes the data at any currently rendered route available anywhere in the tree"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom"; // npm i react-router-dom\n\nimport User from "./User";\nimport { getUsername } from "./getUsername"; // custom function\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    element: <User />,\n    loader: getUsername, // loader function to share data with other components\n    id: "root", // set a id to refer to the data\n    children: [{ index: true, element: <User /> }],\n  },\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="User.jsx"',title:'"User.jsx"'},'import { useRouteLoaderData } from "react-router-dom";\n\nexport default function User() {\n  const user = useRouteLoaderData("root"); // id set in the app route definition\n\n  return <h1>Hello: {user}</h1>;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="getUsername.js"',title:'"getUsername.js"'},'export function getUsername() {\n  return "Stoffel";\n}\n')),(0,a.kt)("h3",{id:"router-forms"},"Router Forms"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom"; // npm i react-router-dom\n\nimport UserForm, { action as submitAction } from "./UserForm";\n\nconst router = createBrowserRouter([\n  {\n    path: "/",\n    element: <UserForm />,\n    action: submitAction, // action to be performed upon submit click\n  },\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="UserForm.jsx"',title:'"UserForm.jsx"'},'import { Form, redirect } from "react-router-dom";\n\nexport default function UserForm() {\n  return (\n    <Form method="POST">\n      <h1>Hello</h1>\n      <label>Name</label>\n      <input type="text" id="name" name="name" />\n      {/* name will be used to identify in the action*/}\n      <button>Submit</button>\n    </Form>\n  );\n}\n\n// action function to capture event data\nexport async function action({ request, params }) {\n  const data = await request.formData();\n  const userData = {\n    username: data.get("name"), //the name attr from the input\n  };\n\n  console.log(userData);\n  // post request with data\n\n  return redirect("/"); //redirect to any defined route\n}\n')),(0,a.kt)("h3",{id:"delete-request"},"Delete Request"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { createBrowserRouter, RouterProvider } from "react-router-dom"; // npm i react-router-dom\n\nimport UserForm, { action as submitAction } from "./UserForm";\n\nconst router = createBrowserRouter([\n  {\n    path: "/:event",\n    element: <UserForm />,\n    action: submitAction, // action to be performed upon submit click\n  },\n]);\n\nexport default function App() {\n  return <RouterProvider router={router} />;\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="UserForm.jsx"',title:'"UserForm.jsx"'},'import { redirect, useSubmit } from "react-router-dom";\n\nexport default function UserForm() {\n  const submit = useSubmit();\n\n  const deleteHandler = () => {\n    submit(null, { method: "delete" }); // define the method to be used\n  };\n\n  return (\n    <>\n      <button onClick={deleteHandler}>Delete</button> {/* Not part of the form */}\n    </>\n  );\n}\n\n// action function to capture event data\nexport async function action({ request, params }) {\n  const data = await params.event; // should match the dynamic param in App ex path: "/:event"\n  console.log(request.method); // get access to the method\n  // post request with data\n\n  return redirect("/event"); //redirect to any defiend route\n}\n')),(0,a.kt)("h2",{id:"forms"},"Forms"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { useState } from "react";\n\nimport useFormInput from "./useFormInput";\n\nexport default function App() {\n  const [username, handleUsernameSubmit, usernameReset] = useFormInput(); // Custom hook to manage form input\n  const [email, handleEmailSubmit, emailReset] = useFormInput();\n\n  const [name, setName] = useState(""); // useState hook to manage state\n  const [mail, setMail] = useState("");\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setName(username); // set the state to the form value\n    setMail(email);\n    usernameReset(); // reset values\n    emailReset();\n\n    // API call\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Hello {name}</h1>\n      <h1>Email {mail}</h1>\n      <label>Name:</label>\n      <input value={username || ""} onChange={handleUsernameSubmit} />\n      <label>Email:</label>\n      <input value={email || ""} onChange={handleEmailSubmit} />\n      <button type="submit">Submit</button>\n    </form>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="useFormInput.jsx"',title:'"useFormInput.jsx"'},'import { useState } from "react";\n\nexport default function useFormInput(initialValue) {\n  // Custom hook to manage form input\n  const [value, setValue] = useState(initialValue);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const reset = () => {\n    setValue("");\n  };\n\n  return [value, handleChange, reset];\n}\n')),(0,a.kt)("h3",{id:"frontend-form-validation"},"Frontend Form Validation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { useState } from "react";\nimport style from "./App.module.css";\n\nexport default function App() {\n  const [name, setName] = useState(""); // State for the name form input\n  const nameIsValid = name.length > 0; // Check is name meets the requirement\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    if (!name) {\n      console.log("Name is Empty");\n      // do something is form is bad\n      return;\n    }\n    // do something is form is good\n    window.location.href = "https://google.com";\n  };\n\n  const updateInput = (e) => {\n    setName(e.target.value);\n  };\n\n  return (\n    <form>\n      <h1>Hello</h1>\n      <label>Name:</label>\n      <input value={name} onChange={updateInput} className={!nameIsValid ? style.error : null} />\n      {!nameIsValid && <p>Name is required</p>}\n      <button type="submit" onClick={submitHandler}>\n        Submit\n      </button>\n    </form>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="App.module.css"',title:'"App.module.css"'},".error {\n  border-color: red;\n}\n")),(0,a.kt)("h2",{id:"passing-data-to-parent-prop"},"Passing Data to Parent Prop"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { useState } from "react";\n\nimport Names from "./Names";\n\nexport default function App() {\n  const [names, setNames] = useState([]);\n\n  const addName = (name) => {\n    setNames([...names, name]);\n  };\n\n  return (\n    <div>\n      <h1>List of Names</h1>\n      <ul>\n        {names.map((name, index) => (\n          <li key={index}>{name}</li>\n        ))}\n      </ul>\n      <Names addNameFunction={addName} />\n    </div>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="Names.jsx"',title:'"Names.jsx"'},'import { useState } from "react";\n\nexport default function Names(props) {\n  const { addNameFunction } = props;\n  const [username, setUsername] = useState("");\n\n  const handleSubmit = (event) => {\n    event.preventDefault(); // Prevent the page from refreshing\n    addNameFunction(username); // Call the parent function\n    setUsername(""); // Empty the input after submission\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor="name">Name</label>\n      <input type="text" id="name" name="name" value={username} onChange={(e) => setUsername(e.target.value)} />\n      <button type="submit">Submit</button>\n    </form>\n  );\n}\n')),(0,a.kt)("h2",{id:"portals"},"Portals"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import ReactDOM from "react-dom";\n\n/*\nBy creating a id in the .html you can move the portal to that id instead of the root\nThis can move it to the top to make semantics better\n*/\n\nexport default function App() {\n  // Pass the element and the id as arguments\n  return ReactDOM.createPortal(\n    <h1>This is a Portal at the top of the DOM</h1>,\n    document.getElementById("portalExample")\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},'<body>\n  <div id="portalExample"></div>\n  <div id="root"></div>\n  <script type="module" src="/src/main.jsx"><\/script>\n</body>\n')),(0,a.kt)("h2",{id:"react-redux"},"React Redux"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @reduxjs/toolkit\nnpm i react-redux\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u251c\u2500\u2500 App.jsx\n\u251c\u2500\u2500 main.jsx\n\u2514\u2500\u2500 store\n\u251c\u2500\u2500 counterSlice.jsx\n\u2514\u2500\u2500 store.jsx\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="main.jsx"',title:'"main.jsx"'},'import ReactDOM from "react-dom/client";\nimport { Provider } from "react-redux"; // npm i react-redux\n\nimport App from "./App";\nimport store from "./store/store"; // import the redux store\n\nconst root = ReactDOM.createRoot(document.getElementById("root"));\nroot.render(\n  // assign the store value\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { useSelector, useDispatch } from "react-redux";\nimport { counterAction } from "./store/counterSlice";\n\nexport default function App() {\n  const dispatch = useDispatch();\n  const counter = useSelector((state) => state.counterSlicer.counter); // state.configureStoreExport.stateItem\n  const showCounter = useSelector((state) => state.counterSlicer.showCounter);\n\n  const increaseHandler = () => {\n    dispatch(counterAction.increment());\n  };\n\n  const decreaseHandler = () => {\n    dispatch(counterAction.decrement({ amount: 2 })); // specify a payload by name\n  };\n\n  const toggleCounter = () => {\n    dispatch(counterAction.toggleCounter(!showCounter));\n  };\n\n  return (\n    <div>\n      <h1>Redux Example</h1>\n      {showCounter ? <h2>Counter : {counter} </h2> : null}\n      <button onClick={increaseHandler}>Increase</button>\n      <button onClick={decreaseHandler}>Decrease</button>\n      <button onClick={toggleCounter}>Toggle Show</button>\n    </div>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/store/counterslice.jsx"',title:'"/store/counterslice.jsx"'},'import { createSlice } from "@reduxjs/toolkit";\n\nconst initialState = {\n  counter: 0,\n  showCounter: true,\n};\n\nconst counterSlice = createSlice({\n  name: "counterSlice", // identifying alias\n  initialState: initialState,\n  // Set reducer actions\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state, action) {\n      // passing a payload. will be dispatched as .func({amount: 2})\n      state.counter = state.counter - action.payload.amount;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    },\n  },\n});\n\nexport const counterAction = counterSlice.actions; // export to component\nexport default counterSlice; // export to store\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="/store/store.jsx"',title:'"/store/store.jsx"'},'import { configureStore } from "@reduxjs/toolkit";\n\nimport counterSlice from "./counterSlice";\n\nconst store = configureStore({\n  reducer: { counterSlicer: counterSlice.reducer },\n});\n\nexport default store; // will be imported in main as a Wrapper for the app\n\n/*\n * When you have multiple stores add it to the configure store\'s reducer in key/value pairs ex.\n *   const store = configureStore({\n *       reducer: { counterSlicer: counterSlice.reducer, auth: authSlice.reducer },\n *   });\n */\n')),(0,a.kt)("h2",{id:"scoping-css"},"Scoping CSS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.jsx"',title:'"App.jsx"'},'import { useState } from "react";\n\n// Name the .css file as a module and import as styles\nimport styles from "./App.module.css";\n\nexport default function App() {\n  const [clicked, setClicked] = useState(false);\n\n  const clickHandler = () => {\n    setClicked(!clicked);\n  };\n\n  /*\n  Call the class name from the styles module\n  Dynamically add the class \'dynamic-bg\' based on weather or not the state is clicked\n  */\n  return (\n    <div>\n      <h1 className={styles.heading} onClick={clickHandler}>\n        Css Modules Example\n      </h1>\n      <div className={clicked && styles["dynamic-bg"]} onClick={clickHandler}>\n        Click Me\n      </div>\n      <h2 className={`${styles.heading} ${clicked && styles["dynamic-bg"]}`}>Combined</h2>\n    </div>\n  );\n}\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="App.module.css"',title:'"App.module.css"'},".heading {\n  color: Black;\n  font-size: 4em;\n}\n\n.heading:hover {\n  color: red;\n}\n\n.dynamic-bg {\n  background-color: yellowgreen;\n}\n\n/* Media queries works the same way */\n@media (max-width: 1000px) {\n  .dynamic-bg {\n    background-color: red;\n  }\n}\n")),(0,a.kt)("h2",{id:"vite-change-default-port"},"Vite: Change Default Port"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="vite.config.js"',title:'"vite.config.js"'},'// vite.config.js\nimport { defineConfig } from "vite";\n\nexport default defineConfig({\n  server: {\n    port: 8000,\n    host: true, // needed for docker\n  },\n});\n')),(0,a.kt)("h2",{id:"various"},"Various"),(0,a.kt)("h3",{id:"timeout-on-input-changes"},"Timeout on input changes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'useEffect(() => {\n  /*\n  Instead of checking each button press, check after 1 sec of inactivity\n  If another button is pressed the current timer will reset \n  */\n  const currentTimer = setTimeout(() => {\n    setFormIsValid(enteredEmail.includes("@") && enteredPassword.trim().length > 6);\n  }, 1000);\n});\n')),(0,a.kt)("h3",{id:"show-current-link-page"},"Show current link page"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'<NavLink\n    to="/"\n    className={({ isActive }) => (isActive ? style.active : undefined)} // className takes an function\n    end // Match only exact path name\n>\n')),(0,a.kt)("h2",{id:"testing"},"Testing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.test.js"',title:'"App.test.js"'},'import { render, screen } from "@testing-library/react";\nimport userEvent from "@testing-library/user-event";\nimport App from "./App"; // import the component\n\n/*\n * Create a suite using the global describe function, and add\n * all relevant tests underneath it.\n *\n * render component\n * get element\n * assert the element is correct\n */\n\ndescribe("App component", () => {\n  test("should render \'Basic testing\' paragraph", () => {\n    render(<App />);\n    const heading = screen.getByText("basic test", { exact: false });\n    expect(heading).toBeInTheDocument();\n  });\n\n  test("should change text when button is clicked", () => {\n    render(<App />);\n    // Check that text is present\n    const preClickText = screen.getByText("State Unchanged", { exact: false });\n    expect(preClickText).toBeInTheDocument();\n\n    // Click the button\n    const buttonElement = screen.getByRole("button");\n    userEvent.click(buttonElement);\n\n    // Check that text is changed\n    const postClickText = screen.getByText("State Changed", { exact: false });\n    expect(postClickText).toBeInTheDocument();\n\n    // make sure original text is not present\n    // when text is not present use queryByText to return null if nothing found\n    const originalText = screen.queryByText("State Unchanged", {\n      exact: false,\n    });\n    expect(originalText).not.toBeInTheDocument();\n  });\n});\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm test\n")),(0,a.kt)("h3",{id:"async-code"},"Async Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="App.test.js"',title:'"App.test.js"'},'import { render, screen } from "@testing-library/react";\nimport App from "./App";\nimport axios from "axios";\n\ndescribe("Async component", () => {\n  test("renders post", async () => {\n    // replace axios with a mock function\n    axios.get = jest.fn();\n    // data should mock to original data\n    axios.get.mockResolvedValueOnce({\n      data: [{ id: "p1", title: "Mock Post" }],\n    });\n\n    render(<App />);\n    const listItemElements = await screen.findAllByRole("listitem", { exact: false }, { timeout: 1000 });\n    expect(listItemElements).not.toHaveLength(0);\n  });\n});\n')),(0,a.kt)("p",null,"To use axios add to package.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"jest": {\n    "moduleNameMapper": {\n      "axios": "axios/dist/node/axios.cjs"\n    }\n  },\n')),(0,a.kt)("h3",{id:"vite"},"Vite"),(0,a.kt)("p",null,"Vite requires some modification ",(0,a.kt)("a",{parentName:"p",href:"https://dev.to/pacheco/configure-vitest-with-react-testing-library-5cbb"},"see here")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Install the dependancies")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i vitest jsdom @testing-library/react @testing-library/jest-dom\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In your package.json file, add the following line under the scripts attribute:")),(0,a.kt)("p",null,"package.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n "test": "vitest"\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a setup tests file")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="path/setup.ts"',title:'"path/setup.ts"'},'import { expect, afterEach } from "vitest";\nimport { cleanup } from "@testing-library/react";\nimport * as matchers from "@testing-library/jest-dom/matchers";\n\nexpect.extend(matchers);\n\nafterEach(() => {\n  cleanup();\n});\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Configure vite.config.js to use this setup")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="vite.config.js"',title:'"vite.config.js"'},"  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n    setupFiles: ['./tests/setup.ts'],\n    testMatch: ['./tests/**/*.test.tsx'],\n    globals: true\n  }\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Your first test")),(0,a.kt)("p",null,"note this should be a .tsx file"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},'import { render, screen } from "@testing-library/react";\nimport App from "../src/App";\n\ndescribe("App", () => {\n  it("renders headline", () => {\n    render(<App />);\n    const headline = screen.getByText(/It works and you found me!/i);\n    expect(headline).toBeInTheDocument();\n  });\n});\n')),(0,a.kt)("h2",{id:"extensions"},"Extensions"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi"},"React Developer Tools")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd/related"},"Redux Dev Tools")))}h.isMDXComponent=!0}}]);