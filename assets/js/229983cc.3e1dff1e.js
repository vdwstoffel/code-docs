"use strict";(self.webpackChunkcode_docs=self.webpackChunkcode_docs||[]).push([[9388],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,i=m(e,["components","mdxType","originalType","parentName"]),p=d(n),c=a,f=p["".concat(s,".").concat(c)]||p[c]||u[c]||l;return n?r.createElement(f,o(o({ref:t},i),{},{components:n})):r.createElement(f,o({ref:t},i))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=c;var m={};for(var s in t)hasOwnProperty.call(t,s)&&(m[s]=t[s]);m.originalType=e,m[p]="string"==typeof e?e:a,o[1]=m;for(var d=2;d<l;d++)o[d]=n[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9201:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>m,toc:()=>d});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_label:"Flask"},o="Flask",m={unversionedId:"python/flask",id:"python/flask",title:"Flask",description:"Getting Started",source:"@site/docs/python/flask.md",sourceDirName:"python",slug:"/python/flask",permalink:"/python/flask",draft:!1,editUrl:"https://github.com/vdwstoffel/code_docs/blob/main/docs/python/flask.md",tags:[],version:"current",frontMatter:{sidebar_label:"Flask"},sidebar:"tutorialSidebar",previous:{title:"Databases",permalink:"/python/databases"},next:{title:"Other",permalink:"/python/other"}},s={},d=[{value:"Getting Started",id:"getting-started",level:2},{value:"Dynamic Routing",id:"dynamic-routing",level:2},{value:"Redirect",id:"redirect",level:2},{value:"Templates",id:"templates",level:2},{value:"Includes",id:"includes",level:3},{value:"Rendering templates",id:"rendering-templates",level:3},{value:"Template Variables",id:"template-variables",level:3},{value:"Template Forms",id:"template-forms",level:2},{value:"Static Files",id:"static-files",level:2},{value:"URL For",id:"url-for",level:2},{value:"Flask Forms",id:"flask-forms",level:2},{value:"Quick Forms with Bootstrap",id:"quick-forms-with-bootstrap",level:3},{value:"Form Validators/Fields",id:"form-validatorsfields",level:3},{value:"Flash messages",id:"flash-messages",level:3},{value:"SQLAlchemy",id:"sqlalchemy",level:2},{value:"Get all records",id:"get-all-records",level:3},{value:"Get by filter",id:"get-by-filter",level:3},{value:"Create record",id:"create-record",level:3},{value:"Update record",id:"update-record",level:3},{value:"Delete record",id:"delete-record",level:3},{value:"Jinja",id:"jinja",level:2},{value:"IF/ELSE",id:"ifelse",level:3},{value:"For",id:"for",level:3}],i={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"flask"},"Flask"),(0,a.kt)("h2",{id:"getting-started"},"Getting Started"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install Flask\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route("/", methods=["GET"])\ndef index():\n    return render_template("index.html")\n\nif __name__ == "__main__":\n    app.run(port=5000, debug=True)\n')),(0,a.kt)("h2",{id:"dynamic-routing"},"Dynamic Routing"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/user/<name>")\n# localhost/user/stoffel\ndef user(name):\n    return render_template("index.html", name=name)\n')),(0,a.kt)("h2",{id:"redirect"},"Redirect"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flask import redirect, url_for\n\nreturn redirect(url_for('function_name'))\n")),(0,a.kt)("h2",{id:"templates"},"Templates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 app.py\n\u2514\u2500\u2500 templates\n    \u251c\u2500\u2500 base.html\n    \u2514\u2500\u2500 index.html\n")),(0,a.kt)("p",null,"Other html file will build of from base.html. So you can add css/bootstrap and all globals here"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="base.html"',title:'"base.html"'},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <meta http-equiv="X-UA-Compatible" content="IE=edge" />\n    <meta name="viewport" content="width=device-width, initial-scale=1.0" />\n    \x3c!-- when extended content can be dynamically added --\x3e\n    <title>{% block title %}{% endblock %}</title>\n  </head>\n  <body>\n    \x3c!-- when extended content can be dynamically added --\x3e\n    {% block body %} {% endblock %}\n  </body>\n</html>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="index.html"',title:'"index.html"'},"\x3c!-- use the base template --\x3e\n{% extends 'base.html' %}\n\n\x3c!-- dynamically add extra content --\x3e\n{% block title %}Home{% endblock %} {% block body %}\n<h1>Welcome to Flask</h1>\n{% endblock %}\n")),(0,a.kt)("h3",{id:"includes"},"Includes"),(0,a.kt)("p",null,"Including one page into another page ex header"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<body>\n  {% include "header.html" %}\n</body>\n')),(0,a.kt)("h3",{id:"rendering-templates"},"Rendering templates"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 app.py\n\u2514\u2500\u2500 templates\n    \u2514\u2500\u2500 index.html\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from flask import render_template\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/", methods=["GET"])\ndef index():\n    return render_template("index.html")\n')),(0,a.kt)("h3",{id:"template-variables"},"Template Variables"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/tempvar")\ndef template_variable():\n    year = 2023\n    return render_template("variables.html", year=year)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<h1>Current Year: {{ year }}</h1>\n")),(0,a.kt)("h2",{id:"template-forms"},"Template Forms"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<form action="{{ url_for(\'template_form\')}}" method="POST">\n  <input type="text" name="userInput" />\n  <button type="submit">Submit</button>\n</form>\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flask import request\n\n@app.route("/tform", methods=["GET", "POST"])\ndef template_form():\n    if request.method == "POST":\n        user_input = request.form.get("userInput")\n        return f"UserInput: {user_input}"\n    else:\n        return render_template("template_form.html")\n')),(0,a.kt)("h2",{id:"static-files"},"Static Files"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 static\n\u2502   \u2514\u2500\u2500 css\n\u2502       \u2514\u2500\u2500 styles.css\n\u2514\u2500\u2500 templates\n    \u2514\u2500\u2500 index.html\n")),(0,a.kt)("p",null,"index.html"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"<head>\n  \x3c!-- static will be used as the base folder --\x3e\n  <link\n    href=\"{{ url_for('static', filename='css/styles.css') }}\"\n    rel=\"stylesheet\"\n  />\n  <title>Flask Example</title>\n</head>\n")),(0,a.kt)("h2",{id:"url-for"},"URL For"),(0,a.kt)("p",null,"Use to redirect to function names"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- Add the function name in the app --\x3e\n<a href=\"{{ url_for('index') }}\">Home</a>\n")),(0,a.kt)("h2",{id:"flask-forms"},"Flask Forms"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install Flask-WTF\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask, render_template\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField\n\napp = Flask(__name__)\napp.config["SECRET_KEY"] = "secret"\n\n\nclass NameForm(FlaskForm):\n    name = StringField("What is your name?")\n    submit = SubmitField("Submit")\n\n\n@app.route("/", methods=["GET"])\ndef index():\n    return render_template("index.html")\n\n\n@app.route("/flaskform", methods=["GET", "POST"])\ndef flaskform():\n    form = NameForm()\n\n    if form.validate_on_submit():\n        name = form.name.data\n        return f"{name}"\n\n    return render_template("flask_form.html", form=form)\n\n\nif __name__ == "__main__":\n    app.run(port=5000, debug=True)\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<form method="POST">\n  {{ form.csrf_token }} {{ form.name.label }} {{\n  form.name(class="red_background") }} {{ form.submit() }}\n</form>\n')),(0,a.kt)("h3",{id:"quick-forms-with-bootstrap"},"Quick Forms with Bootstrap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install Flask-Bootstrap\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask, request, render_template\nfrom flask_wtf import FlaskForm\nfrom flask_bootstrap import Bootstrap\n\napp = Flask(__name__)\nBootstrap(app)\napp.config["SECRET_KEY"] = "secret"\n\nclass NameForm(FlaskForm):\n    name = StringField("What is your name?")\n    submit = SubmitField("Submit")\n\n@app.route("/flaskform", methods=["GET", "POST"])\ndef flaskform():\n    form = NameForm()\n\n    if form.validate_on_submit():\n        name = form.name.data\n        return f"{name}"\n\n    return render_template("flask_form.html", form=form)\n\nif __name__ == "__main__":\n    app.run(port=5000, debug=True)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'{% import "bootstrap/wtf.html" as wtf %}\n\n<form method="POST" novalidate>{{ wtf.quick_form(form) }}</form>\n')),(0,a.kt)("h3",{id:"form-validatorsfields"},"Form Validators/Fields"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from wtforms import (StringField, BooleanField, DateTimeField, RadioField,\n                     SelectField, TextField, TextAreaField, PasswordField, SubmitField)\nfrom wtforms.validators import DataRequired, Email, Length\n\nname = StringField("Name", validators=[DataRequired()])\nemail = StringField("Email", validators=[Email()])\npassword = PasswordField("Password", validators=[Length(min=8, max=16)])\nhuman = BooleanField("Are you human")\nGender = RadioField("Choose Gender:", choices=[("male", "Male"), ("female", "Femal")])\nfood_choice = SelectField("Pick your Favorite Food", choices=[("white", "Chicken"), ("red", "Beef")])\ncomments = TextAreaField()\ndate = DateTimeField()\nsubmit = SubmitField()\n')),(0,a.kt)("h3",{id:"flash-messages"},"Flash messages"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask, render_template, flash\nfrom flask_wtf import FlaskForm\nfrom wtforms import SubmitField\n\napp = Flask(__name__)\napp.config["SECRET_KEY"] = "secret"\n\n\nclass NameForm(FlaskForm):\n    submit = SubmitField("Submit")\n\n\n@app.route("/", methods=["GET"])\ndef index():\n    return render_template("index.html")\n\n\n@app.route("/flash", methods=["GET", "POST"])\ndef flash_message():\n    form = NameForm()\n\n    if form.validate_on_submit():\n        flash("Button Clicked")\n\n    return render_template("flash.html", form=form)\n\n\nif __name__ == "__main__":\n    app.run(port=5000, debug=True)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-django"},'<form method="POST">\n{% with messages = get_flashed_messages() %}\n    {% for message in messages %}\n        {% if message %}\n            <p>{{ message }}</p>\n        {% endif %}\n    {% endfor %}\n{% endwith %}\n\n  {{ form.csrf_token }}\n  {{ form.submit() }}\n</form>\n')),(0,a.kt)("h2",{id:"sqlalchemy"},"SQLAlchemy"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install Flask-SQLAlchemy\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'from flask import Flask, render_template, redirect, url_for\nfrom flask_sqlalchemy import SQLAlchemy\nfrom random import randint\n\napp = Flask(__name__)\napp.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///db.sqlite"\napp.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False\n\ndb = SQLAlchemy(app)\napp.app_context().push()\n\n# Create db\nclass UserLog(db.Model):\n    __tablename__ = "userlogs"\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(100), nullable=False)\n    number = db.Column(db.Integer, nullable=False)\ndb.create_all()\n\nif __name__ == "__main__":\n    app.run(port=5000, debug=True)\n')),(0,a.kt)("h3",{id:"get-all-records"},"Get all records"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/", methods=["GET"])\ndef index():\n    all_records = UserLog.query.all()\n    return render_template("db_records.html", records=all_records)\n')),(0,a.kt)("h3",{id:"get-by-filter"},"Get by filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/number/<number>", methods=["GET"])\ndef get_number(number):\n    record = UserLog.query.filter_by(number=number).first()\n    return f"{record.username} {record.number}"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/name/<name>", methods=["GET"])\ndef get_name(name):\n    all_records = UserLog.query.filter_by(username=name)\n    return render_template("db_records.html", records=all_records)\n')),(0,a.kt)("h3",{id:"create-record"},"Create record"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/add", methods=["POST"])\ndef add():\n    new_entry = UserLog(username="Stoffel", number=randint(0, 20))\n    db.session.add(new_entry)\n    db.session.commit()\n    return redirect(url_for("index"))\n')),(0,a.kt)("h3",{id:"update-record"},"Update record"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/update/<number>", methods=["POST"])\ndef update(number):\n    record = UserLog.query.filter_by(number=number).first()\n    record.number = randint(80, 99)\n    db.session.commit()\n    return redirect(url_for("index"))\n')),(0,a.kt)("h3",{id:"delete-record"},"Delete record"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/delete/<number>", methods=["POST"])\ndef delete(number):\n    record = UserLog.query.filter_by(number=number).first()\n    db.session.delete(record)\n    db.session.commit()\n    return redirect(url_for("index"))\n')),(0,a.kt)("h2",{id:"jinja"},"Jinja"),(0,a.kt)("h3",{id:"ifelse"},"IF/ELSE"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'@app.route("/user/<name>",)\ndef user(name):\n    return render_template("index.html", name=name)\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"{% if name %}\n<h1>Hello {{ name }}!</h1>\n{% else %}\n<h1>Hello, Flask!</h1>\n{% endif %}\n")),(0,a.kt)("h3",{id:"for"},"For"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},"{% for record in records %} {{record.username}} {{record.number}} {% endfor %}\n")))}u.isMDXComponent=!0}}]);