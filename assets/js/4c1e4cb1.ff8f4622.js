"use strict";(self.webpackChunkcode_docs=self.webpackChunkcode_docs||[]).push([[3187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),m=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=m(n),u=r,h=c["".concat(l,".").concat(u)]||c[u]||d[u]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var m=2;m<o;m++)s[m]=n[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2627:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>m});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"Other"},s="Python",i={unversionedId:"python/other",id:"python/other",title:"Python",description:"Requests",source:"@site/docs/python/other.md",sourceDirName:"python",slug:"/python/other",permalink:"/python/other",draft:!1,editUrl:"https://github.com/vdwstoffel/code_docs/blob/main/docs/python/other.md",tags:[],version:"current",frontMatter:{sidebar_label:"Other"},sidebar:"tutorialSidebar",previous:{title:"Flask",permalink:"/python/flask"},next:{title:"Pandas",permalink:"/python/pandas"}},l={},m=[{value:"Requests",id:"requests",level:2},{value:"UUID",id:"uuid",level:2},{value:"ArgParse",id:"argparse",level:2},{value:"dotenv",id:"dotenv",level:2},{value:"Email",id:"email",level:2},{value:"Attachment",id:"attachment",level:3}],p={toc:m},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"python"},"Python"),(0,r.kt)("h2",{id:"requests"},"Requests"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install requests\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import requests\n\ndef get_requests():\n    ## https://sunrise-sunset.org/api\n    params = {\n        'lat': '50.5039',\n        'lng': '4.4699',\n        'formatted': 0\n    }\n    response = requests.get(url='https://api.sunrise-sunset.org/json', params=params)\n    response.raise_for_status()\n    ret = response.json()\n    print(ret)\n")),(0,r.kt)("h2",{id:"uuid"},"UUID"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import uuid\n\nx = uuid.uuid4()\n## >>> 33259d8a-f16c-4f00-b26f-76dae63ca071\n")),(0,r.kt)("h2",{id:"argparse"},"ArgParse"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"#!/usr/bin/python\n\nimport argparse\n\nparser = argparse.ArgumentParser(\n    description='Example of Command Line Arguments')\n## Add arguments\nparser.add_argument('-m',\n                    '--message',\n                    metavar=\"message\",\n                    action='store',\n                    type=str,\n                    nargs='?',\n                    required=True,\n                    help='Prints out a message to the console')\n\nparser.add_argument('-c',\n                    '--capitalize',\n                    action='store_true',\n                    help='Capitalizises the message')\n\n## Create object\nargs = parser.parse_args()\n\nif args.capitalize:\n  print(args.message.upper())\nelse:\n  print(args.message)\n")),(0,r.kt)("h2",{id:"dotenv"},"dotenv"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pip install python-dotenv\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from dotenv import load_dotenv\nload_dotenv(dotenv_path='../.env')\nimport os\n\nprint(os.getenv('DB_PASSWORD'))\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'DB_PASSWORD="SOMETHING"\n')),(0,r.kt)("h2",{id:"email"},"Email"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import smtplib\nimport ssl\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv(dotenv_path=\'../../.env\')\n\nsender_email = os.getenv(\'SENDER_EMAIL\')\nreceiver_email = os.getenv(\'RECEIVER_EMAIL\')\npassword = os.getenv(\'EMAIL_PASSWORD\')\nport = 465  ## For SSL\n\n\n## Construct the email\nmessage = MIMEMultipart("alternative")\nmessage["Subject"] = "Python Email Test"\nmessage["From"] = sender_email\nmessage["To"] = receiver_email\n\n## Create the plain-text and HTML version of your message\nhtml = """\\\n<html>\n  <body>\n    <h1>Python Test Mail</h1><br>\n    <p>Link to <a href=\'www.google.com\'>google</a></p>\n  </body>\n</html>\n"""\n\n## Turn these into plain/html MIMEText objects\nmessage_body = MIMEText(html, "html")\n## Add HTML/plain-text parts to MIMEMultipart message\n## The email client will try to render the last part first\nmessage.attach(message_body)\n\n## Create secure connection with server and send email\n## Create a secure SSL context\ncontext = ssl.create_default_context()\n\nwith smtplib.SMTP_SSL("smtp.gmail.com", port, context=context) as server:\n    server.login(sender_email, password)\n    server.sendmail(\n        sender_email, receiver_email, message.as_string()\n    )\n')),(0,r.kt)("h3",{id:"attachment"},"Attachment"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import smtplib\nimport ssl\nfrom email import encoders\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv(dotenv_path=\'../../.env\')\n\nsender_email = os.getenv(\'SENDER_EMAIL\')\nreceiver_email = os.getenv(\'RECEIVER_EMAIL\')\npassword = os.getenv(\'EMAIL_PASSWORD\')\nport = 465  ## For SSL\n\n\n## Construct the email\nmessage = MIMEMultipart("alternative")\nmessage["Subject"] = "Python Email Test"\nmessage["From"] = sender_email\nmessage["To"] = receiver_email\n\n## Create the plain-text and HTML version of your message\nhtml = """\\\n<html>\n  <body>\n    <h1>Python Test Mail With Attachment</h1><br>\n    <p>Link to <a href=\'www.google.com\'>google</a></p>\n  </body>\n</html>\n"""\n\n## Turn these into plain/html MIMEText objects\nmessage_body = MIMEText(html, "html")\n## Add HTML/plain-text parts to MIMEMultipart message\n## The email client will try to render the last part first\nmessage.attach(message_body)\n\n## Add attachment\nfilename = \'emailAttachment.txt\'\n## Open file in binary mode\nwith open(filename, "rb") as attachment:\n    ## Add file as application/octet-stream\n    ## Email client can usually download this automatically as attachment\n    part = MIMEBase("application", "octet-stream")\n    part.set_payload(attachment.read())\n\n## Encode file in ASCII characters to send by email\nencoders.encode_base64(part)\n\n## Add header as key/value pair to attachment part\npart.add_header(\n    "Content-Disposition",\n    f"attachment; filename= {filename}",\n)\n\n## Add attachment to message and convert message to string\nmessage.attach(part)\ntext = message.as_string()\n\n## Log in to server using secure context and send email\ncontext = ssl.create_default_context()\nwith smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context) as server:\n    server.login(sender_email, password)\n    server.sendmail(sender_email, receiver_email, text)\n')))}d.isMDXComponent=!0}}]);