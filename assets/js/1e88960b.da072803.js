"use strict";(self.webpackChunkcode_docs=self.webpackChunkcode_docs||[]).push([[4602],{3905:(e,n,a)=>{a.d(n,{Zo:()=>d,kt:()=>k});var t=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?r(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(a),u=o,k=p["".concat(s,".").concat(u)]||p[u]||m[u]||r;return a?t.createElement(k,l(l({ref:n},d),{},{components:a})):t.createElement(k,l({ref:n},d))}));function k(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[p]="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=a[c];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},145:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var t=a(7462),o=(a(7294),a(3905));const r={sidebar_label:"Docker",sidebar_position:5},l="Docker",i={unversionedId:"docker/docker",id:"docker/docker",title:"Docker",description:"Images",source:"@site/docs/docker/docker.md",sourceDirName:"docker",slug:"/docker/",permalink:"/docker/",draft:!1,editUrl:"https://github.com/vdwstoffel/code_docs/blob/main/docs/docker/docker.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Docker",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"MongoDB",permalink:"/databases/mongodb"},next:{title:"Examples",permalink:"/docker/docker-examples"}},s={},c=[{value:"Images",id:"images",level:2},{value:"Build an image",id:"build-an-image",level:3},{value:"List all images",id:"list-all-images",level:3},{value:"Delete an image",id:"delete-an-image",level:3},{value:"Push/Pull images to/from dockerhub",id:"pushpull-images-tofrom-dockerhub",level:3},{value:"Containers",id:"containers",level:2},{value:"Run Container",id:"run-container",level:3},{value:"Named Volumes",id:"named-volumes",level:3},{value:"Anonymous Volumes",id:"anonymous-volumes",level:3},{value:"Bind Mounts",id:"bind-mounts",level:3},{value:"Web Specific",id:"web-specific",level:4},{value:"Run commands",id:"run-commands",level:4},{value:"Stop Container",id:"stop-container",level:3},{value:"List running containers",id:"list-running-containers",level:3},{value:"Delete Container",id:"delete-container",level:3},{value:"Copying to/from a container",id:"copying-tofrom-a-container",level:3},{value:"Networks",id:"networks",level:2},{value:"Node/MongoDB example",id:"nodemongodb-example",level:3},{value:"Express/React example",id:"expressreact-example",level:3},{value:"Connect to a container on your host machine",id:"connect-to-a-container-on-your-host-machine",level:3},{value:"Docker Logs",id:"docker-logs",level:2},{value:"Dockerfile",id:"dockerfile",level:2},{value:"Variables in docker file",id:"variables-in-docker-file",level:3},{value:"Env via cli",id:"env-via-cli",level:3},{value:".env files",id:"env-files",level:3},{value:"Arguments",id:"arguments",level:3},{value:".dockerignore",id:"dockerignore",level:3},{value:"Docker-Compose",id:"docker-compose",level:2},{value:"build options",id:"build-options",level:3},{value:"Starting Containers",id:"starting-containers",level:3},{value:"Stopping Containers",id:"stopping-containers",level:3},{value:"Utility Containers",id:"utility-containers",level:2}],d={toc:c},p="wrapper";function m(e){let{components:n,...a}=e;return(0,o.kt)(p,(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"docker"},"Docker"),(0,o.kt)("h2",{id:"images"},"Images"),(0,o.kt)("h3",{id:"build-an-image"},"Build an image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#   -t: tag\ndocker build -t my-image:my-tag .\n\n#   -f: path/to/file\ndocker build -f docker/Dockerfile -t my-image:my-tag .\n")),(0,o.kt)("h3",{id:"list-all-images"},"List all images"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker images\n")),(0,o.kt)("h3",{id:"delete-an-image"},"Delete an image"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker rmi <image_name>\n\n# Delete all unused images\ndocker image prune -a\n")),(0,o.kt)("h3",{id:"pushpull-images-tofrom-dockerhub"},"Push/Pull images to/from dockerhub"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker push <image_name>\ndocker pull <image_name>\n")),(0,o.kt)("h2",{id:"containers"},"Containers"),(0,o.kt)("h3",{id:"run-container"},"Run Container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run <image_name>\n\n# host port is what you connect to\n# container port is same as app\ndocker run -d -p <host_port>:<container_port> --name docker_example <image_name>\n\n# Restart a container\ndocker start <container_id>\n")),(0,o.kt)("h3",{id:"named-volumes"},"Named Volumes"),(0,o.kt)("p",null,"Named volumes in Docker provide a way to manage and persist data outside of a container in a flexible and easy-to-use manner"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v volume_name:/app/data my-image\n\n# list all volumes\ndocker volumes ls\n")),(0,o.kt)("h3",{id:"anonymous-volumes"},"Anonymous Volumes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v /path/\n")),(0,o.kt)("h3",{id:"bind-mounts"},"Bind Mounts"),(0,o.kt)("p",null,"A bind mount in Docker is a method of attaching a specific directory or file from your host machine's filesystem directly into a Docker container. This allows the container to access and modify the files and directories on the host system as if they were part of the container's own filesystem."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -v /path/on/host:/path/in/container my-image\n\n# append an extra :ro to make bind mount readonly\ndocker run -v /path/on/host:/path/in/container:ro my-image\n")),(0,o.kt)("h4",{id:"web-specific"},"Web Specific"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"-v /path/on/host:/path/in/container")," : Where to store generate files"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"-v full/file/path:/workdir_in_dockerfile")," : This allows local file changes to reflect in the container"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"-v /workdir/node_modules")," : node_modules to prevent the copy from, overwriting it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d --rm -p 3000:3000 --name some_name -v /path/on/host:/path/in/container -v full/file/path:/workdir -v /workdir/node_modules my-image\n")),(0,o.kt)("h4",{id:"run-commands"},"Run commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#   -p: port\n#   -d: detach  (run in background)\n#   -i: interactive\n#   -t: terminal\n#   --name string: ex --name my_container\n#   --rm: remove container once stopped\n#   -v: volume_name:path    ex, -v feedback:/app/feedback\n")),(0,o.kt)("h3",{id:"stop-container"},"Stop Container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop <container_id>\ndocker stop <container_name>\n")),(0,o.kt)("h3",{id:"list-running-containers"},"List running containers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker ps\n\n# List previous containers as well\ndocker ps -a\n")),(0,o.kt)("h3",{id:"delete-container"},"Delete Container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker rm <container_id>\n\n# Automatically delete container after exit\ndocker run --rm <container_id>\n\n# Remove all unused containers\ndocker container prune\n")),(0,o.kt)("h3",{id:"copying-tofrom-a-container"},"Copying to/from a container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker cp <container_id>:/path/to/file path/on/local/disk\n")),(0,o.kt)("h2",{id:"networks"},"Networks"),(0,o.kt)("p",null,"Docker networks provide isolated and organized communication channels between containers, enhancing security and enabling efficient data exchange within Docker environments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# First create a network\ndocker network create my-example\n\n# Then run your images with --network\ndocker run --network my-example my-images:my-tag\n")),(0,o.kt)("h3",{id:"nodemongodb-example"},"Node/MongoDB example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'// connect to mongo using the container name\nconst mongo = "mongodb://my-app-mongo:27017/dbName";\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# run mongo container. Name should match the connection in the node app\ndocker run -d --name my-app-mongo --network node-mongo-example mongo:latest\n\n# run node app\ndocker run -d -p 3000:3000 --network node-mongo-example my-image:my-tag\n")),(0,o.kt)("h3",{id:"expressreact-example"},"Express/React example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'"proxy": "http://container-name:<express-port>",\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="App.jsx"',title:'"App.jsx"'},'const response = await fetch("http://localhost:<react-port>/goals");\n')),(0,o.kt)("h3",{id:"connect-to-a-container-on-your-host-machine"},"Connect to a container on your host machine"),(0,o.kt)("p",null,"Ex .When connecting a container to a local db"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'docker run -d -p 3000:3000 --network="host" my-image:my-tag\n')),(0,o.kt)("h2",{id:"docker-logs"},"Docker Logs"),(0,o.kt)("p",null,"The view and debug containers"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs <container_name>\n")),(0,o.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-docker"},'FROM baseImage\n\nWORKDIR /the/workdir/path\n\nCOPY source dest\n\nRUN command                 # Runs when image is build, ex npm install, apt install, pip install\n\nCOPY source dest\n\nEXPOSE port\n\nVOLUME ["path/to/file"]     # add if you need anonymous volumes\n\nCMD [ "executable" ]        # runs when container start\n')),(0,o.kt)("h3",{id:"variables-in-docker-file"},"Variables in docker file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-docker"},"ENV PORT 80                 # Add env variables\nEXPOSE $PORT\n")),(0,o.kt)("h3",{id:"env-via-cli"},"Env via cli"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d -e MONGO_INITDB_ROOT_USERNAME=stoffel -e MONGO_INITDB_ROOT_PASSWORD=secret mongo:latest\n")),(0,o.kt)("h3",{id:"env-files"},".env files"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker run --env-file ./.env\n")),(0,o.kt)("h3",{id:"arguments"},"Arguments"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-docker"},"ARG DEFAULT_PORT=80\nENV PORT $DEFAULT_PORT\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# to change the port during build\ndocker build -t my-images:my-tag --build-arg DEFAULT_PORT=8080\n")),(0,o.kt)("h3",{id:"dockerignore"},".dockerignore"),(0,o.kt)("p",null,"Files/Folder to ignore"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"node_module/\nDockerfile\n.git\n.venv\n")),(0,o.kt)("h2",{id:"docker-compose"},"Docker-Compose"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 ...files\n\u251c\u2500\u2500 frontend\n\u2502   \u251c\u2500\u2500 ...files\n\u251c\u2500\u2500 docker-compose.yaml\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title+"docker-compose.yaml"','title+"docker-compose.yaml"':!0},'version: "version" # docker-compose specification\nservices:\n  # name your services\n  service-name:\n    image: imageName:tag # name of image (own name or use existing images ex mongo, node)\n    build: path # when building your own Dockerfile\n    container_name: name # give custom name to service\n    ports:\n      - "<host_port>:<container_port>"\n    volumes:\n      # named volumes\n      - volume_name:/path/\n      # relative path for bind mounts\n      - ./backend:/app\n      # anon volumes\n      - /app/node_modules\n    environment:\n      - name=value # env variables\n    env_file:\n      - ./path/to/filename\n    depends_on:\n      - serviceName # other services (containers) it depends on\n\n    # using interactive mode\n    stdin_open: true\n    tty: true\n\n  # second-service:\n  #   ...\n\nvolumes:\n  # Top level volumes where you add your named volumes\n  volume_name:\n')),(0,o.kt)("h3",{id:"build-options"},"build options"),(0,o.kt)("p",null,"For Dockerfiles in nested folders, the build can be specified"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'build:\n  context: . #  specifies the build context as the root folder of your project.\n  dockerfile: docker/Dockerfile # points to the Dockerfile in the "docker" folder.\n')),(0,o.kt)("p",null,"Note that the copy should end with a ",(0,o.kt)("inlineCode",{parentName:"p"},"/")," to specify a folder in the docker/Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"COPY package*.json ./\n")),(0,o.kt)("h3",{id:"starting-containers"},"Starting Containers"),(0,o.kt)("p",null,"Starting from the same folder as the docker-compose.yaml.\nVolumes and networks will automatically be created"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up           # supply services name if you do not want to run all\ndocker-compose up -d        # run in detached mode\ndocker-compose up --build   # rebuild the images\n")),(0,o.kt)("h3",{id:"stopping-containers"},"Stopping Containers"),(0,o.kt)("p",null,"Deletes all containers + network it created"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose down\n\n# to remove volumes (do not persist data)\ndocker-compose down -v\n")),(0,o.kt)("h2",{id:"utility-containers"},"Utility Containers"),(0,o.kt)("p",null,"A utility container is a Docker container that is specifically designed to perform a single task or provide a specialized service to other containers."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile",metastring:'title="Dockerfile"',title:'"Dockerfile"'},'FROM node:18-alpine\n\nWORKDIR /app\n\nENTRYPOINT [ "npm" ]    # initial arg to be run, other command will be appened\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="docker-compose.yaml"',title:'"docker-compose.yaml"'},'version: "3.18"\nservices:\n  # app services here\n  # ...\n\n  npm-test: # service name to be run in cli\n    build: /path/to/dockerfile\n    stdin_open: true # if applicable\n    tty: true # if applicable\n    volumes:\n      - ./:/app\n')),(0,o.kt)("p",null,"Then in the terminal run the chosen service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# docker-compose run --rm service_name arguments\ndocker-compose run --rm npm-test init    # runs npm init\ndocker-compose run --rm npm-test install # runs npm install\n")),(0,o.kt)("p",null,"If you have other app containers in the docker-compose.yaml and don`t want to run the utility containers. Add depends_on to the service"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  frontend:\n    image: "node"\n    depends_on:\n      - backend\n      - database\n')),(0,o.kt)("p",null,"Then in the command line run"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d frontend\n")),(0,o.kt)("p",null,"This will launch all the dependent services"))}m.isMDXComponent=!0}}]);