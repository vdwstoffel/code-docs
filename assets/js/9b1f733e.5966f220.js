"use strict";(self.webpackChunkcode_docs=self.webpackChunkcode_docs||[]).push([[399],{3905:(n,e,t)=>{t.d(e,{Zo:()=>i,kt:()=>m});var r=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function a(n,e){if(null==n)return{};var t,r,o=function(n,e){if(null==n)return{};var t,r,o={},s=Object.keys(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(r=0;r<s.length;r++)t=s[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=r.createContext({}),u=function(n){var e=r.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},i=function(n){var e=u(n.components);return r.createElement(l.Provider,{value:e},n.children)},p="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(n,e){var t=n.components,o=n.mdxType,s=n.originalType,l=n.parentName,i=a(n,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||s;return t?r.createElement(m,c(c({ref:e},i),{},{components:t})):r.createElement(m,c({ref:e},i))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var s=t.length,c=new Array(s);c[0]=f;var a={};for(var l in e)hasOwnProperty.call(e,l)&&(a[l]=e[l]);a.originalType=n,a[p]="string"==typeof n?n:o,c[1]=a;for(var u=2;u<s;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2277:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const s={sidebar_label:"Databases"},c=void 0,a={unversionedId:"python/databases",id:"python/databases",title:"databases",description:"PostgreSQL",source:"@site/docs/python/databases.md",sourceDirName:"python",slug:"/python/databases",permalink:"/python/databases",draft:!1,editUrl:"https://github.com/vdwstoffel/code_docs/blob/main/docs/python/databases.md",tags:[],version:"current",frontMatter:{sidebar_label:"Databases"},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/python/"},next:{title:"Flask",permalink:"/python/flask"}},l={},u=[{value:"PostgreSQL",id:"postgresql",level:2},{value:"SQLite3",id:"sqlite3",level:2}],i={toc:u},p="wrapper";function d(n){let{components:e,...t}=n;return(0,o.kt)(p,(0,r.Z)({},i,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"postgresql"},"PostgreSQL"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"pip install psycopg2\npip install python-dotenv\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import psycopg2                     # pip install psycopg2\nfrom dotenv import load_dotenv      # pip install python-dotenv\nimport os\n\nload_dotenv(dotenv_path=\'../../.env\')\n\n\nclass Connector:\n\n    def __init__(self) -> None:\n\n        self.user = os.getenv("DB_USER")\n        self.password = os.getenv("DB_PASSWORD")\n        self.database = os.getenv("DATABASE")\n        self.host = os.getenv("HOST")\n\n    def connect_to_database(self):\n        """\n        Establishes and active connection to the database and returns to connection\n        """\n        conn = psycopg2.connect(\n            database=self.database,\n            host=self.host,\n            user=self.user,\n            password=self.password\n        )\n\n        if conn:\n            return conn\n        else:\n            raise Exception("Database connection failed")\n\n\nclass Users(Connector):\n\n    def get_all_users(self):\n        conn = self.connect_to_database()\n        curr = conn.cursor()\n\n        try:\n            curr.execute(\'SELECT * FROM users\')\n            query = curr.fetchall()\n            conn.commit()\n            conn.close()\n            return (query)  # return a list of tuples\n        except Exception as e:\n            print(e)\n            conn.rollback()\n            conn.close()\n\n    def get_user(self, username):\n        conn = self.connect_to_database()\n        curr = conn.cursor()\n\n        try:\n            curr.execute(f"""SELECT * FROM users\n                         WHERE username = \'{username}\'""")\n            query = curr.fetchone()\n            conn.commit()\n            conn.close()\n            return (query)  # return a tuple\n        except Exception as e:\n            print(e)\n            conn.rollback()\n            conn.close()\n\n    def insert_user_record(self, data: tuple):\n        conn = self.connect_to_database()\n        cur = conn.cursor()\n        try:\n            cur.execute("""\n                INSERT INTO users (username, age)\n                VALUES (%s, %s);\n                        """, data)\n        except Exception as e:\n            print(e)\n        finally:\n            conn.commit()\n            conn.close()\n\n\nif __name__ == "__main__":\n    db = Users()\n    db.connect_to_database()\n    db.insert_user_record(("Rits", 2))\n    print(db.get_all_users())\n    print(db.get_user(\'Stoffel\'))\n')),(0,o.kt)("h2",{id:"sqlite3"},"SQLite3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import sqlite3\n\nclass Connector:\n    def connect_to_database(self):\n        conn = sqlite3.connect("snippets.sqlite3")\n\n        if conn:\n            return conn\n        else:\n            print("Error connecting to database")\n\n\nclass Users(Connector):\n\n    def create_table_users(self):\n        conn = self.connect_to_database()\n        curr = conn.cursor()\n\n        curr.execute("""\n                        CREATE TABLE users (\n                            user_id integer PRIMARY KEY AUTOINCREMENT,\n                            username text,\n                            age integer\n                        )\n                    """)\n        conn.commit()\n        conn.close()\n\n    def get_all_users(self):\n        conn = self.connect_to_database()\n        curr = conn.cursor()\n\n        try:\n            curr.execute(\'SELECT * FROM users\')\n            query = curr.fetchall()\n            conn.commit()\n            conn.close()\n            return (query)  # return a list of tuples\n        except Exception as e:\n            print(e)\n            conn.rollback()\n            conn.close()\n\n    def get_user(self, username):\n        conn = self.connect_to_database()\n        curr = conn.cursor()\n\n        try:\n            curr.execute(f"""\n                        SELECT * FROM users\n                        WHERE username = \'{username}\'\n                         """)\n            query = curr.fetchone()\n            conn.commit()\n            conn.close()\n            return (query)  # return a tuple\n        except Exception as e:\n            print(e)\n            conn.rollback()\n            conn.close()\n\n    def insert_user_record(self, data: tuple):\n        conn = self.connect_to_database()\n        cur = conn.cursor()\n        try:\n            cur.execute("""\n                INSERT INTO users (username, age)\n                VALUES (?, ?);\n                        """, data)\n        except Exception as e:\n            print(e)\n        finally:\n            conn.commit()\n            conn.close()\n')))}d.isMDXComponent=!0}}]);